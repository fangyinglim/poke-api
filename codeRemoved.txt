
// //fetch pokeapi
// const getName = async function() {
//     const pokeNameFromUser = await whenUserSubmits(); //returns a promise when user submits 
//     const url = `https://pokeapi.co/api/v2/pokemon/${pokeNameFromUser}`; //using string literal
//     const res = await fetch(url); 
//     // returns a promise when you 'fetch', instead of using .then, 
//     // we use await. this means we (1) fetch the data first, 
//     // then 'await' stalls JS from assigning to const res 
//     // until the promise is resolved, then assigns it to const.
//     const pokemon = await res.json(); //returns another promise when resolved
//     console.log(pokemon);
//     // getPokemon(pokemon);
//     return pokemon; //doesnt return data, returns another promise 
// }

// getName().then( (data) => {
//     console.log(data);
//     getPokemon(data);
// }); 

// //created a promise to return input from user//
// function whenUserSubmits() {
//     return new Promise ((resolve, reject) => {
//         document.getElementById('submit-btn').onclick = (event) => {
//             event.preventDefault();
//             const nameTemp2 = document.getElementById('pokemonNameFromUser').value;
//             resolve(nameTemp2);
//         }
//     })
// }

// document.getElementById('reset-btn').onclick = () => {
//     window.location.reload();
// }


// let nameofPokemonSubmittedByUser = '';
//     document.getElementById('submit-btn').onclick = function getPokeNameFromUser(event) {
//     return new Promise ( (resolve, reject) => {
//         event.preventDefault(); //stop form from submitting
//         nameofPokemonSubmittedByUser = document.getElementById('pokemonName').value;
//         resolve(nameofPokemonSubmittedByUser);
// })}
// //retrieve user input into 'nameofPokemonSubmittedByUser' variable
// let nameofPokemonSubmittedByUser = '';
// document.getElementById('submit-btn').onclick = function getName(event) {
//     return new Promise ((resolve, reject)=> {
//         event.preventDefault(); //stop form from submitting
//         nameofPokemonSubmittedByUser = document.getElementById('pokemonName').value;
//         resolve(nameofPokemonSubmittedByUser);
//     })
//     .then((message) => (console.log(message)))}




        // let children = document.getElementsByClassName('type');
        // console.log(children);
        // for (let eachChild of children) {
            //     console.log(eachChild);


    //when arrow key is used to select WIP//
    // let count = -1;
    // document.querySelector('#pokemonNameFromUser').addEventListener('keyup', (event) => {
    //     if (count === resultsNameOnly.length -1) {
    //         count = 0;
    //     }
    //     else if (event.keyCode === 40) {
    //         count++; 
    //     }
    //     return returnCount(count)
    // })
    
    // function returnCount(count) {
    //     console.log(count);
    //     console.log(document.getElementById('matchList').childNodes[count]);
    //     document.getElementById('matchList').childNodes[count].className += ' highlight' ;
        
    // }


// console.log(document);
// let count = -1;
// document.getElementById('pokemonNameFromUser').addEventListener('keypressed', (event) => {
//     console.log(event.key)
//     if (event.key === 'ArrowDown') {
//         count++;
//     }
//     console.log(count)
//     testing(count);
// })

            // for (let j=0; j < namesOfWeaknessForEachType.length; j++) {
            //     // console.log(data[`${pokeTypes[i].innerText}`][0].weakness[j] ); 
            //     let newDiv3 = document.createElement('div')
            //     newDiv3.classList.add('type', `${namesOfWeaknessForEachType[j]}`)
            //     newDiv3.innerText = namesOfWeaknessForEachType[j]
            //     console.log(newDiv3)
            // }